/*
 * Copyright (c) 2013, Benjamin J. Fry
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Benjamin J. Fry nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.bjf.osgi.dependency;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProjectHelper;

import java.io.*;
import java.util.*;

/**
 * OSGiDependencyMojo
 *
 * This plugin will collect all required bundles which are referenced from the calling projects bundle.
 * 
 * @phase prepare-package
 * @goal generate-bundle-dependencies
 * @requiresDependencyResolution runtime
 * @requiresDependencyCollection runtime
 * 
 * @author bfry
 * @since 1.0-SNAPSHOT
 */
@SuppressWarnings("ALL")
public class OSGiDependencyMojo extends AbstractOSGiDependencyMojo {
    /**
     * @parameter expression="${project.packaging}"
     * @readonly
     * @required
     */
    private String projectPackaging;

    /**
     * The source Manifest file for the project, it should have been generated by the bundle tools
     * @parameter default-value="${project.build.directory}/classes/META-INF/MANIFEST.MF"
     */
    private File sourceManifestFile;

    /**
     * The target directory for the bundleDependency file 
     * @parameter default-value="${project.build.directory}/classes"
     */
    private File outputDirectory;
    
    /**
     * Target path (effectively the class path in the bundle) for the bundleDependency file 
     * @parameter default-value="META-INF/bundle.dependencies"
     */
    private String bundleDependencyFilePath;
    
    /**
     * Helper class to assist in attaching artifacts to the project instance.
     * project-helper instance, used to make addition of resources simpler.
     * @component
     * @required
     * @readonly
     */
    private MavenProjectHelper projectHelper;

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        if (!"bundle".equals(projectPackaging)) {
            getLog().debug("skipping since this is not set to <packaging>bundle</packaging>");
            return; 
        }

        Set<Artifact> osgiBundleDependencies = getOSGiDependencies(getProject().getArtifact(), new OSGiManifestUtil(sourceManifestFile));
        File bundleDependencyFile = new File(outputDirectory, bundleDependencyFilePath);
        
        // write out file
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(bundleDependencyFile));
            for (Artifact dependency: osgiBundleDependencies) {
                String dependencyStr = dependency.getGroupId() + ":" + dependency.getArtifactId() + ":" + dependency.getVersion();
                getLog().debug("Found dependency: " + dependency.getGroupId() + ":" + dependency.getArtifactId() + ":" + dependency.getVersion());
                writer.write(dependencyStr);
                writer.newLine();
            }
            writer.flush();
        } catch (IOException e) {
            throw new MojoFailureException("could not write to file: " + bundleDependencyFile, e);
        } finally {
            try {
                if (writer != null) writer.close();
            } catch (IOException e) {
                // ignoring
                getLog().debug("exception while closing writer", e);
            }
        }
        
        getLog().debug("adding resource: " + bundleDependencyFile);
        projectHelper.addResource(getProject(), outputDirectory.getAbsolutePath(), Collections.singletonList(bundleDependencyFilePath), null);
    }
}